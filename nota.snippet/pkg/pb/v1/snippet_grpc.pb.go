// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: v1/snippet.proto

package snippetpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SnippetService_CreateSnippet_FullMethodName      = "/snippet.v1.SnippetService/CreateSnippet"
	SnippetService_GetSnippet_FullMethodName         = "/snippet.v1.SnippetService/GetSnippet"
	SnippetService_ListMySnippets_FullMethodName     = "/snippet.v1.SnippetService/ListMySnippets"
	SnippetService_ListPublicSnippets_FullMethodName = "/snippet.v1.SnippetService/ListPublicSnippets"
	SnippetService_UpdateSnippet_FullMethodName      = "/snippet.v1.SnippetService/UpdateSnippet"
	SnippetService_DeleteSnippet_FullMethodName      = "/snippet.v1.SnippetService/DeleteSnippet"
)

// SnippetServiceClient is the client API for SnippetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SnippetServiceClient interface {
	CreateSnippet(ctx context.Context, in *CreateSnippetRequest, opts ...grpc.CallOption) (*CreateSnippetResponse, error)
	GetSnippet(ctx context.Context, in *GetSnippetRequest, opts ...grpc.CallOption) (*GetSnippetResponse, error)
	ListMySnippets(ctx context.Context, in *ListMySnippetsRequest, opts ...grpc.CallOption) (*ListMySnippetsResponse, error)
	ListPublicSnippets(ctx context.Context, in *ListPublicSnippetsRequest, opts ...grpc.CallOption) (*ListPublicSnippetsResponse, error)
	UpdateSnippet(ctx context.Context, in *UpdateSnippetRequest, opts ...grpc.CallOption) (*UpdateSnippetResponse, error)
	DeleteSnippet(ctx context.Context, in *DeleteSnippetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type snippetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSnippetServiceClient(cc grpc.ClientConnInterface) SnippetServiceClient {
	return &snippetServiceClient{cc}
}

func (c *snippetServiceClient) CreateSnippet(ctx context.Context, in *CreateSnippetRequest, opts ...grpc.CallOption) (*CreateSnippetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSnippetResponse)
	err := c.cc.Invoke(ctx, SnippetService_CreateSnippet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snippetServiceClient) GetSnippet(ctx context.Context, in *GetSnippetRequest, opts ...grpc.CallOption) (*GetSnippetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSnippetResponse)
	err := c.cc.Invoke(ctx, SnippetService_GetSnippet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snippetServiceClient) ListMySnippets(ctx context.Context, in *ListMySnippetsRequest, opts ...grpc.CallOption) (*ListMySnippetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMySnippetsResponse)
	err := c.cc.Invoke(ctx, SnippetService_ListMySnippets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snippetServiceClient) ListPublicSnippets(ctx context.Context, in *ListPublicSnippetsRequest, opts ...grpc.CallOption) (*ListPublicSnippetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPublicSnippetsResponse)
	err := c.cc.Invoke(ctx, SnippetService_ListPublicSnippets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snippetServiceClient) UpdateSnippet(ctx context.Context, in *UpdateSnippetRequest, opts ...grpc.CallOption) (*UpdateSnippetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSnippetResponse)
	err := c.cc.Invoke(ctx, SnippetService_UpdateSnippet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snippetServiceClient) DeleteSnippet(ctx context.Context, in *DeleteSnippetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SnippetService_DeleteSnippet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SnippetServiceServer is the server API for SnippetService service.
// All implementations must embed UnimplementedSnippetServiceServer
// for forward compatibility.
type SnippetServiceServer interface {
	CreateSnippet(context.Context, *CreateSnippetRequest) (*CreateSnippetResponse, error)
	GetSnippet(context.Context, *GetSnippetRequest) (*GetSnippetResponse, error)
	ListMySnippets(context.Context, *ListMySnippetsRequest) (*ListMySnippetsResponse, error)
	ListPublicSnippets(context.Context, *ListPublicSnippetsRequest) (*ListPublicSnippetsResponse, error)
	UpdateSnippet(context.Context, *UpdateSnippetRequest) (*UpdateSnippetResponse, error)
	DeleteSnippet(context.Context, *DeleteSnippetRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedSnippetServiceServer()
}

// UnimplementedSnippetServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSnippetServiceServer struct{}

func (UnimplementedSnippetServiceServer) CreateSnippet(context.Context, *CreateSnippetRequest) (*CreateSnippetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSnippet not implemented")
}
func (UnimplementedSnippetServiceServer) GetSnippet(context.Context, *GetSnippetRequest) (*GetSnippetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSnippet not implemented")
}
func (UnimplementedSnippetServiceServer) ListMySnippets(context.Context, *ListMySnippetsRequest) (*ListMySnippetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMySnippets not implemented")
}
func (UnimplementedSnippetServiceServer) ListPublicSnippets(context.Context, *ListPublicSnippetsRequest) (*ListPublicSnippetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPublicSnippets not implemented")
}
func (UnimplementedSnippetServiceServer) UpdateSnippet(context.Context, *UpdateSnippetRequest) (*UpdateSnippetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSnippet not implemented")
}
func (UnimplementedSnippetServiceServer) DeleteSnippet(context.Context, *DeleteSnippetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSnippet not implemented")
}
func (UnimplementedSnippetServiceServer) mustEmbedUnimplementedSnippetServiceServer() {}
func (UnimplementedSnippetServiceServer) testEmbeddedByValue()                        {}

// UnsafeSnippetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SnippetServiceServer will
// result in compilation errors.
type UnsafeSnippetServiceServer interface {
	mustEmbedUnimplementedSnippetServiceServer()
}

func RegisterSnippetServiceServer(s grpc.ServiceRegistrar, srv SnippetServiceServer) {
	// If the following call pancis, it indicates UnimplementedSnippetServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SnippetService_ServiceDesc, srv)
}

func _SnippetService_CreateSnippet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSnippetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnippetServiceServer).CreateSnippet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnippetService_CreateSnippet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnippetServiceServer).CreateSnippet(ctx, req.(*CreateSnippetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnippetService_GetSnippet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSnippetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnippetServiceServer).GetSnippet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnippetService_GetSnippet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnippetServiceServer).GetSnippet(ctx, req.(*GetSnippetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnippetService_ListMySnippets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMySnippetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnippetServiceServer).ListMySnippets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnippetService_ListMySnippets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnippetServiceServer).ListMySnippets(ctx, req.(*ListMySnippetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnippetService_ListPublicSnippets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPublicSnippetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnippetServiceServer).ListPublicSnippets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnippetService_ListPublicSnippets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnippetServiceServer).ListPublicSnippets(ctx, req.(*ListPublicSnippetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnippetService_UpdateSnippet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSnippetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnippetServiceServer).UpdateSnippet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnippetService_UpdateSnippet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnippetServiceServer).UpdateSnippet(ctx, req.(*UpdateSnippetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnippetService_DeleteSnippet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSnippetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnippetServiceServer).DeleteSnippet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnippetService_DeleteSnippet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnippetServiceServer).DeleteSnippet(ctx, req.(*DeleteSnippetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SnippetService_ServiceDesc is the grpc.ServiceDesc for SnippetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SnippetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "snippet.v1.SnippetService",
	HandlerType: (*SnippetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSnippet",
			Handler:    _SnippetService_CreateSnippet_Handler,
		},
		{
			MethodName: "GetSnippet",
			Handler:    _SnippetService_GetSnippet_Handler,
		},
		{
			MethodName: "ListMySnippets",
			Handler:    _SnippetService_ListMySnippets_Handler,
		},
		{
			MethodName: "ListPublicSnippets",
			Handler:    _SnippetService_ListPublicSnippets_Handler,
		},
		{
			MethodName: "UpdateSnippet",
			Handler:    _SnippetService_UpdateSnippet_Handler,
		},
		{
			MethodName: "DeleteSnippet",
			Handler:    _SnippetService_DeleteSnippet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/snippet.proto",
}
